generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  active
  inactive
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
}

enum NotificationType {
  appointment_confirmed
  appointment_cancelled
  appointment_reminder
  new_client
  new_appointment
  payment_received
  service_completed
  reminder_sent
  system
}

enum ReportType {
  monthly
  financial
  clients
  services
  performance
}

model Client {
  id                Int            @id @default(autoincrement())
  name              String
  email             String         @unique
  phone             String
  notes             String?
  status            ClientStatus
  totalAppointments Int            @default(0)
  lastVisit         DateTime?
  appointments      Appointment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Notification      Notification[]

  @@map("clients")
}

model Staff {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String
  specialties  String[]
  workingHours String?
  active       Boolean       @default(true)
  appointments Appointment[] @relation("StaffAppointments")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("staff")
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  duration     Int // minutos
  price        Float
  active       Boolean       @default(true)
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("services")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  active    Boolean   @default(true)
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Appointment {
  id             Int               @id @default(autoincrement())
  clientId       Int
  client         Client            @relation(fields: [clientId], references: [id])
  serviceId      Int
  service        Service           @relation(fields: [serviceId], references: [id])
  professionalId Int
  professional   Staff             @relation("StaffAppointments", fields: [professionalId], references: [id])
  date           DateTime
  time           String // ou DateTime se preferir
  duration       Int
  price          Float
  status         AppointmentStatus
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("appointments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  data      Json?
  clientId  Int?
  client    Client?          @relation(fields: [clientId], references: [id])
  timestamp DateTime         @default(now())

  @@map("notifications")
}

model Report {
  id        Int        @id @default(autoincrement())
  type      ReportType
  period    String // Ex: '2024-06', '2024-Q1', etc
  data      Json
  createdAt DateTime   @default(now())

  @@map("reports")
}

model BusinessConfig {
  id           Int      @id @default(autoincrement())
  name         String
  email        String
  phone        String
  address      String
  description  String?
  workingHours Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("business_configs")
}
