generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  active
  inactive
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
}

enum NotificationType {
  appointment_confirmed
  appointment_cancelled
  appointment_reminder
  new_client
  new_appointment
  payment_received
  service_completed
  reminder_sent
  system
}

enum ReportType {
  monthly
  financial
  clients
  services
  performance
}

enum ActivityType {
  appointment_confirmed
  new_client
  appointment_rescheduled
  appointment_cancelled
  payment_received
  service_completed
  reminder_sent
}

model Client {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  phone             String
  notes             String?
  status            ClientStatus
  totalAppointments Int            @default(0)
  lastVisit         DateTime?
  appointments      Appointment[]
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Notification      Notification[] @relation("ClientNotifications")
  activities        Activity[]

  @@map("clients")
}

model Staff {
  id           String           @id @default(uuid())
  name         String
  email        String           @unique
  phone        String
  specialties  StaffSpecialty[]
  workingHours String?
  active       Boolean          @default(true)
  appointments Appointment[]    @relation("StaffAppointments")
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("staff")
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?
  duration     Int // minutos
  price        Float
  active       Boolean       @default(true)
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id])
  appointments Appointment[]
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("services")
}

model Category {
  id               String           @id @default(uuid())
  name             String           @unique
  active           Boolean          @default(true)
  services         Service[]
  staffSpecialties StaffSpecialty[]
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("categories")
}

model Appointment {
  id             String            @id @default(uuid())
  clientId       String
  client         Client            @relation(fields: [clientId], references: [id])
  serviceId      String
  service        Service           @relation(fields: [serviceId], references: [id])
  professionalId String
  professional   Staff             @relation("StaffAppointments", fields: [professionalId], references: [id])
  date           DateTime
  time           String // ou DateTime se preferir
  duration       Int
  price          Float
  status         AppointmentStatus
  notes          String?
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("appointments")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  data      Json?
  clientId  String?
  client    Client?          @relation("ClientNotifications", fields: [clientId], references: [id])
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  timestamp DateTime         @default(now())

  @@map("notifications")
}

model Report {
  id        String     @id @default(uuid())
  type      ReportType
  period    String // Ex: '2024-06', '2024-Q1', etc
  data      Json
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())

  @@map("reports")
}

model User {
  id              String           @id // id do usu√°rio no Clerk
  email           String           @unique
  clients         Client[]
  staff           Staff[]
  services        Service[]
  categories      Category[]
  appointments    Appointment[]
  notifications   Notification[]
  reports         Report[]
  businessConfigs BusinessConfig[]
  activities      Activity[]

  @@map("users")
}

model BusinessConfig {
  id           String   @id @default(uuid())
  name         String
  email        String
  phone        String
  address      String
  description  String?
  workingHours Json
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("business_configs")
}

model Activity {
  id        String       @id @default(uuid())
  type      ActivityType
  clientId  String?
  client    Client?      @relation(fields: [clientId], references: [id])
  userId    String?
  user      User?        @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())

  @@map("activity")
}

model StaffSpecialty {
  id         String   @id @default(uuid())
  staffId    String
  categoryId String
  staff      Staff    @relation(fields: [staffId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("staff_specialties")
}
